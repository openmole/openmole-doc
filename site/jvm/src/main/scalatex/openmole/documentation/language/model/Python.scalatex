
@import org.openmole.site.tools._
@import org.openmole.site._

@p{Embedding Python application}

  In OpenMOLE, a generic task named @hl.openmole("CARETask") offers to run external applications packaged with @a("CARE", href := Resource.care.file). The site (proposing an outdated version of CARE for now, but a great documentation) can be found @a("here", href := "https://proot-me.github.io/"). CARE makes it possible to package your application from any Linux computer, and then re-execute it on any other Linux computer. The CARE / OpenMOLE pair is a very efficient way to distribute your application at very large scale with very little effort. Please note that this packaging step is only necessary if you plan distribute your workflow to an heterogeneous computing environment such as the EGI grid. If you target local clusters, running the same operating system and sharing a network file system, you can directly jump to the @a("SystemExecTask", href := DocumentationPages.root.language.model.native.file + "#Usingalocalexecutable(innonportabletasks)"), section.

  @p You should first install CARE:
    @ul
      @li{download the CARE binary from @a("here", href := Resource.care.file)}
      @li{make it executable (@hl.highlight("chmod +x care", "plain"))}
      @li{add the path to the executable to your PATH variable (@hl.highlight("export PATH=/path/to/the/care/folder:$PATH", "plain"))}

  @p The @hl.openmole("CARETask") has been designed to embed native binaries such as programs compiled from C, C++, Fortran, Python, R, Scilab... Embedding an application in a @hl.openmole("CARETask") happens in 2 steps:

  @p @b{First} you should package your application using the CARE binary you just installed, so that it executes on any Linux environment. This usually consists in prepending your command line with @hl.highlight("care -o /path/to/myarchive.tgz.bin -r ~ -p /path/to/mydata1 -p /path/to/mydata2 mycommand myparam1 myparam2", "plain"). Before going any further, here are a few notes about the options passed to CARE:
      @ul
        @li{@hl.highlight("-o", "plain") indicates where to store the archive. At the moment, OpenMOLE prefers to work with archives stored in .tgz.bin, so please don't toy with the extension ;)}
        @li{@hl.highlight("-r ~", "plain") is not compulsory but it has proved mandatory in some cases. So as rule of thumb, if you encounter problems when packaging your application, try adding / removing it.}
        @li{@hl.highlight("-p /path", "plain") asks CARE not to archive /path. This is particularly useful for input data that will change with your parameters. @b{You probably do not want} to embed this data in the archive, and we'll see further down how to inject the necessary input data in the archive from OpenMOLE.}

  @p @b{Second}, just provide the resulting package along with some other information to OpenMOLE. Et voila! If you encounter any problem to package your application, please refer to the corresponding entry in the @a("FAQ", href := DocumentationPages.faq.file + "#Ican'tgetCARE/PRoottowork")

  @p One very important aspect of CARE is that you only need to package your application @b{once}. As long as the execution you use to package your application makes uses of all the dependencies, you should not have any problem re-executing this archive with other parameters.

  @p{Example with a Python script}

    @p The toy Python script for this test case is:
    @br @hl.highlight("""
    import sys
    f = open(sys.argv[2], 'w')
    f.write(sys.argv[1])
    exit(0)""", "python")

    @p This script is saved to @i{hello.py}. We first package it using CARE:
    @hl.highlight("""care -o hello.tgz.bin python hello.py 42 test.txt""", "plain")

    @p We can now run it in OpenMOLE using the following script:
    @br @hl.openmole("""
    // Declare the variable
    val arg = Val[Int]
    val output = Val[File]

    // python task
    val pythonTask =
      CARETask(workDirectory / "hello.tgz.bin", "python hello.py ${arg} output.txt") set (
        inputs += arg,
        outputFiles += ("output.txt", output),
        outputs += arg
      )

    val exploration = ExplorationTask(arg in (0 to 10))

    val copy = CopyFileHook(output, workDirectory / "hello${arg}.txt")
    val env = LocalEnvironment(4)
    exploration -< (pythonTask hook copy on env by 2)""")

   @p Again notions from OpenMOLE are reused in this example. If you're not too familiar with @a("Environments", href := DocumentationPages.root.language.environment.file) or @i{Groupings}, check the relevant sections of the documentation.

   @p Two things should be noted from these examples:
     @ul
       @li{The procedure to package an application @b{is always the same} regardless of the underlying programming language / framework used.}
       @li{The CARETask is not different from the @a("SystemExecTask", href := DocumentationPages.root.language.model.native.file + "#Usingalocalexecutable(innonportabletasks)"), to the extent of the archive given as a first parameter.}
    These two aspects make it really easy to embed native applications in OpenMOLE.

  @p{Advanced options}

    @p The @i{CARETask} can be customised to fit the needs of a specific application. For instance, some applications disregarding standards might not return the expected 0 value upon completion. The return value of the application is used by OpenMOLE to determine whether the task has been successfully executed, or needs to be re-executed. Setting the boolean flag @hl.openmoleNoTest("errorOnReturnValue") to @i{false} will prevent OpenMOLE from re-scheduling a @i{CARETask} that have reported a return code different from 0. You can also get the return code in a variable using the @hl.openmoleNoTest("returnValue") setting.

    @p Another default behaviour is to print the standard and error outputs of each task in the OpenMOLE console. Such raw prints might not be suitable when a very large number of tasks is involved or that further processing are to be performed on the outputs. A @i{CARETask}'s standard and error outputs can be assigned to OpenMOLE variable and thus injected in the dataflow by summoning respectively the @hl.openmoleNoTest("stdOut") and @hl.openmoleNoTest("stdErr") actions on the task.

    @p As any other process, the applications contained in OpenMOLE's native tasks accept environment variables to influence their behaviour.
    Variables from the dataflow can be injected as environment variables using the @hl.openmoleNoTest{environmentVariable += (variable, "variableName")} field.
    If no name is specified, the environment variable is named after the OpenMOLE variable.
    Environment variables injected from the dataflow are @b{inserted in the pre-existing set of environment variables from the execution host}. This shows particularly useful to preserve
    the behaviour of some toolkits when executed on local environments (ssh, clusters, ...) where users control their work environment.

    @p The following snippet creates a task that employs the features described in this section:
    @br @hl.openmole("""
    // Declare the variable
    val output = Val[String]
    val error  = Val[String]
    val value = Val[Int]

    // Any task
    val pythonTask =
      CARETask("hello.tgz.bin", "python hello.py") set (
        stdOut := output,
        stdErr := error,
        returnValue := value,
        environmentVariable += (value, "I_AM_AN_ENV_VAR")
      )""")

    @p You will note that @b{options holding a single value} are set using the @hl.openmoleNoTest(":=") operator. Also, the OpenMOLE variables containing the standard and error outputs are @b{automatically marked as outputs} of the task, and must not be added to the @hl.openmoleNoTest("outputs") list.

  @p{Using local resources}
    @p To access data present on the execution node (outside the CARE filesystem) you should use a dedicated option of the @i{CARETask}: @i{hostFiles}. This option takes the path of a file on the execution host and binds it to the same path in the CARE filesystem. Optionally you can provide a second argument to specify the path explicitly. For instance:
    @br @hl.openmole("""
      val careTask = CARETask("care.tgz.bin", "executable arg1 arg2 /path/to/my/file /virtual/path arg4") set (
        hostFiles += ("/path/to/my/file"),
        hostFiles += ("/path/to/another/file", "/virtual/path")
      )""")

    @p This CAREÂ task will thus be able to access @i{/path/to/my/file} and @i{/virtual/path}.

  @p{Using a local executable (in non portable tasks)}
    @p The @i{CARETask} was designed to be portable from one machine to another. However, some use-cases require executing specific commands installed on a given cluster. To achieve that you should use another task called @i{SystemExecTask}. This task is made to launch native commands on the execution host. There is two modes for using this task:
    @ul
      @li{Calling a command that is @b{assumed to be available on any execution node of the environment}. The command will be looked for in the system as it would from a traditional command line: searching in the default @i{PATH} or an absolute location.}
      @li{Copying a @b{local script not installed on the remote environment}. Applications and scripts can be copied to the task's work directory using the @hl.openmoleNoTest("resources") field. Please note that contrary to the CARETask, there is @b{no guarantee that an application passed as a resource to a SystemExecTask will re-execute successfully on a remote environment}}.

    @p The @i{SystemExecTask} accepts an arbitrary number of commands. These commands will be @b{executed sequentially on the same execution node} where the task is instantiated. In other words, it is not possible to split the execution of multiple commands grouped in the same @i{SystemExecTask}.

    @p The following example first copies and runs a bash script on the remote host, before calling the remote's host @hl.highlight("/bin/hostname", "plain"). Both commands' standard and error outputs are gathered and concatenated to a single OpenMOLE variable: respectively @hl.openmoleNoTest("stdOut") and @hl.openmoleNoTest("stdErr").  To achieve that you should use a @i{SystemExecTask}:
     @br @hl.openmole("""
      // Declare the variable
      val output = Val[String]
      val error  = Val[String]

      // Any task
      val scriptTask =
        SystemExecTask("bash script.sh", "hostname") set (
          resources += workDirectory / "script.sh",
          stdOut := output,
          stdErr := error
        )

       scriptTask hook ToStringHook()""")

    @p In this case the bash script might depend on program installed on the remote host. Similarly, we @b{assume the presence} of @hl.highlight("/bin/hostname", "plain") on the execution node. Therefore this task cannot be considered as portable.

    @p Note that each execution is isolated in separate folder on the execution host and that the task execution is considered as failed if the script return a value different from 0. If you need another behaviour you can use the same advanced options as the @i{CARETask} regarding the return code.

  @p{Troubleshooting}
    @p You should always try to re-execute your application outside of OpenMOLE first. This allows you to ensure the packaging process with CARE was successful. If something goes wrong at this stage, you should check the official @a("CARE documentation", href := "https://proot-me.github.io/") or the archives of the @a("CARE mailing list", href := "https://groups.google.com/forum/?fromgroups#!forum/reproducible").
    @p If the packaged application re-executes as you'd expect, but you still struggle to embed it in OpenMOLE, then get in touch with our user community via our the @a("OpenMOLE user mailing-list", href := "http://list.openmole.org/").
