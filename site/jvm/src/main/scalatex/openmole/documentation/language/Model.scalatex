@import org.openmole.site.tools._
@import org.openmole.site._

@p{Task}
    This section explains how you can embed your programs and compose them in simple OpenMOLE workflows.

    @p A workflow is a set of @b{tasks} linked with each other through
    @b{@a("transitions", href := DocumentationPages.root.language.transition.file)}. From a high level point of view, tasks comprise
    @b{inputs}, @b{outputs} and @b{optional default values}. Tasks are the atomic computing element of OpenMOLE.
    They describe what OpenMOLE should execute and delegate to remote environments. They embed your own programs.
    Depending on what kind of program (binary executable, Java...) you want to embed in OpenMOLE you have to choose the
    matching task. Tasks execution @b{depends on inputs variables}, which are provided by the dataflow, and each task
    @b{produces outputs} which are provided to the dataflow and transmitted to the input of consecutive tasks.

    @p Let's begin by a very useless task that does nothing to illustrate all this jargon:
    @br @hl.openmole("""
      // Define a variable i of type Int
      val i = Val[Int]

      // Instantiate a task that does nothing
      // this task takes the i variable in input and provides it back as an output to the dataflow for the next task
      val t = EmptyTask() set (
        inputs += i,
        outputs += i
      )""")

    @p It is also possible to specify default values which are used by the task in case no input data was provided in
    the dataflow:
    @br @hl.openmole("""
      val i = Val[Int]

      val t = EmptyTask() set (
        inputs += i,
        outputs += i,
        // set i's default value to 0
        i := 0
      )""")