@import org.openmole.site._
@import org.openmole.site.tools._
@import Resource._
@import DocumentationPages._

@def tasks = """
  // Define the variables that are transmitted between the tasks
  val i = Val[Double]
  val res = Val[Double]

  // Define the model, here it is a simple task executing "res = i * 2", but it can be your model
  val model =
    ScalaTask("val res = i * 2") set (
      inputs += i,
      outputs += (i, res)
    )"""

@def localScript = s"""
$tasks

  // Define the execution environment, here it is a local execution environment with 4 threads but
  // it could be a remote cluster or a grid. The exploration will work the same way whatever the environment
  // and no installation step is required on the execution environment.
  val env = LocalEnvironment(4)
  """


  @div(`class` := "text-center")(
      a(`class` := "btn btn-default btn-sm", id := "download-button", href := openmole.file)(s"Download OpenMOLE FIXMEVERSION"),
      br,
      hr(style := "width:200px; height:1px;"),
      i(s"${name} (version FIXMEVERSION) was released on FIXM:VERSION DATE.")
    )

@p{The big picture}

  @p When you build a model, you need to understand and/or optimize some parameters and to understand there effect on the dynamics of you model. Then embed you model in OpenMOLE (5 minutes), use one of the distributed genetic algorithms provided by OpenMOLE (5 minutes) and launch the model exploration on a distributed execution environment with thousands of machines (1 minutes). To summarize, you can design large scale model exploration reusing legacy code and advanced numeric methods in approximately 10 minutes.

@p{Try it}

  @p You can try OpenMOLE online using the @a("OpenMOLEÂ demonstration site", href := "http://demo.openmole.org").

@p{Install it}

  @p OpenMOLE requires that Java version 8 or above is set as the default java on your computer. To make sure of that you can check our @a("FAQ", href := Pages.faq.file). Then just extract the archive, and you're done! OpenMOLE is installed and works out of the box!

  @p Once installed you can launch OpenMOLE by executing the @i{openmole} file in the installation directory (it is called @i{openmole.bat} for windozers). It will bring up the OpenMOLE @a("application", href := root.application.file) that runs in your web browser (OpenMOLE supports Firefox and Chrome).

@p{Your first exploration}
  Let's explore one variable, multiply it by 2 and then displays each result. The computation is executed in a multi-threaded environment on the local machine.

  @p In the OpenMOLE interface, first create a file named @i{example.oms} @("(the file extension matters")). Open it and write the following:

  @br @hl.openmole(s"""
  $localScript
  // Define the design of experiment
  DirectSampling(
    evaluation = model on env hook ToStringHook(),
    sampling = i in (0.0 to 100.0 by 1.0)
  )""")

  @p You can run it by clicking on the execution button.

  @p To distribute the exact same execution to a remote cluster just switch the environment definition. The only configuration step required for this to work is to have an account on the cluster and to provide your authentication to OpenMOLE. Configuring authentications is explained in the GUI documenation LINK and in the console documentation in the section dedicated to each @a("environment", href := root.language.environment.file).

  @br @hl.openmole(s"""
  val env = SLURMEnvironment("myLogin", "cluster.iscpif.fr")

  DirectSampling(
    evaluation = model on env hook ToStringHook() on env,
    sampling = i in (0.0 to 100.0 by 1.0)
  )""", header = tasks)

  @p This is just a tiny bit of what OpenMOLE can achieve! Now you might want to discover how to:
  @ul
    @li{include your program in the @a("Model documentation", href := root.language.model.file),}
    @li{define your environment in the @a("environment documentation", href := root.language.environment.file),}
    @li{describe your design of experiments in the @a("sampling documentation", href := root.language.sampling.file).}

@p{Get help}
  To get help you are more than welcome to contact the OpenMOLE user mailing list. To do so, you should @a("subscribe here", href := "http://list.openmole.org/"), and then you can post your question to the list users 'at' list.openmole.org. We're also present on the @b{#openmole} channel of the @a("ISC-PIF's RocketChat", href := "https://chat.iscpif.fr/channel/openmole").
